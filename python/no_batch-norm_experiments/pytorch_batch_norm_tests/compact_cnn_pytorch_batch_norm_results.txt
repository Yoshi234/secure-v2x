conv.weight         :tensor([[[[-0.0825,  0.0250, -0.0013,  ..., -0.1500, -0.1901, -0.0104]]],


        [[[-0.1436, -0.1095, -0.0188,  ..., -0.1160, -0.1501, -0.1817]]],


        [[[-0.1480, -0.2157, -0.2193,  ...,  0.0983,  0.0697,  0.0685]]],


        ...,


        [[[ 0.3628,  0.2572,  0.1094,  ...,  0.3734,  0.3469,  0.3328]]],


        [[[-0.2835, -0.2920, -0.1898,  ..., -0.2375, -0.1304, -0.2099]]],


        [[[ 0.2844,  0.1998,  0.2647,  ...,  0.1211,  0.3074,  0.2422]]]],
       device='cuda:0', dtype=torch.float64)
size                :torch.Size([32, 1, 1, 64])

====================================================================================================
conv.bias           :tensor([-0.0653, -0.0361, -0.0809,  0.0537,  0.0119, -0.0428, -0.0127, -0.0025,
         0.1072,  0.1116, -0.0962,  0.0458,  0.0483,  0.0478, -0.0170,  0.0313,
         0.0315,  0.1217, -0.1198, -0.0474, -0.0841, -0.0606,  0.0245,  0.0762,
        -0.0945,  0.0813,  0.1044, -0.0616,  0.0218, -0.0642,  0.0268, -0.0580],
       device='cuda:0', dtype=torch.float64)
size                :torch.Size([32])

====================================================================================================
batch.weight        :tensor([1.0950, 1.1859, 1.1319, 1.0113, 0.8704, 0.7864, 1.1930, 0.8893, 1.0734,
        1.0993, 0.7268, 1.1209, 0.9317, 1.0935, 1.0768, 1.1903, 1.0807, 1.0204,
        1.0603, 0.9247, 1.1074, 0.9661, 0.8627, 1.1146, 0.9284, 1.0398, 1.1910,
        1.0990, 0.9655, 1.0868, 0.9361, 0.8790], device='cuda:0',
       dtype=torch.float64)
size                :torch.Size([32])

====================================================================================================
batch.bias          :tensor([-0.2694, -0.2416, -0.2591,  0.2631,  0.2378,  0.2223, -0.2418,  0.2235,
        -0.2490, -0.2565, -0.2927, -0.2042,  0.2640, -0.2381, -0.2192, -0.2742,
        -0.2698,  0.2910, -0.2890,  0.2827, -0.3051, -0.2956,  0.2054, -0.2583,
        -0.2516,  0.2807, -0.2629, -0.2381,  0.3044, -0.2513,  0.2406,  0.2506],
       device='cuda:0', dtype=torch.float64)
size                :torch.Size([32])

====================================================================================================
batch.running_mean  :tensor([-0.1203, -0.0823, -0.0011,  0.6579,  0.0804, -0.8195, -0.0611, -0.2876,
         0.0480,  0.0248, -0.2033, -0.0228,  0.4048, -0.0480, -0.1300, -0.0614,
        -0.0878, -0.4205, -0.2483, -0.6746, -0.2060, -0.2014,  0.3994, -0.0386,
        -0.1598,  0.6359,  0.1466, -0.1753, -0.5923, -0.1158,  0.6682, -0.7684],
       device='cuda:0', dtype=torch.float64)
size                :torch.Size([32])

====================================================================================================
batch.running_var   :tensor([322.1001, 226.0422, 351.4352, 295.1551, 232.5680, 456.2699, 292.0415,
        355.6299, 394.0944, 337.4106, 357.8986, 583.6667, 369.3492, 266.4484,
        475.8064, 201.3378, 491.3923, 516.2382, 294.5933, 317.4217, 364.8139,
        532.8688, 364.0840, 286.0776, 771.3265, 271.1231, 265.2368, 327.4093,
        301.4303, 532.0172, 362.2807, 417.8780], device='cuda:0',
       dtype=torch.float64)
size                :torch.Size([32])

====================================================================================================
batch.num_batches_tracked:210
size                :torch.Size([])

====================================================================================================
fc.weight           :tensor([[-0.2270, -0.3386, -0.3209,  0.2366,  0.0024,  0.0131, -0.3137,  0.1535,
         -0.2341, -0.2225, -0.1987, -0.3053,  0.1977, -0.2730, -0.1475, -0.2794,
         -0.0832,  0.1505, -0.2780,  0.2174, -0.3817, -0.0900,  0.0140, -0.2077,
          0.0386,  0.2472, -0.2040, -0.2095,  0.1902, -0.0430,  0.0794,  0.0144],
        [ 0.1656,  0.3778,  0.1927, -0.1304, -0.1744, -0.1128,  0.3534, -0.0365,
          0.1212,  0.2199, -0.0556,  0.1447, -0.0905,  0.2290,  0.2670,  0.3392,
          0.2798, -0.2612,  0.0798, -0.0377,  0.0555,  0.1554, -0.1446,  0.2425,
          0.2250, -0.2491,  0.3751,  0.2295, -0.1754,  0.3233, -0.2008, -0.1817]],
       device='cuda:0', dtype=torch.float64)
size                :torch.Size([2, 32])

====================================================================================================
fc.bias             :tensor([ 0.1748, -0.2716], device='cuda:0', dtype=torch.float64)
size                :torch.Size([2])

====================================================================================================
